// Code generated by MockGen. DO NOT EDIT.
// Source: controller/controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// FindUserById mocks base method.
func (m *MockUseCase) FindUserById(Id int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", Id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockUseCaseMockRecorder) FindUserById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockUseCase)(nil).FindUserById), Id)
}

// GetExternalApiUsers mocks base method.
func (m *MockUseCase) GetExternalApiUsers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalApiUsers")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetExternalApiUsers indicates an expected call of GetExternalApiUsers.
func (mr *MockUseCaseMockRecorder) GetExternalApiUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalApiUsers", reflect.TypeOf((*MockUseCase)(nil).GetExternalApiUsers))
}

// ReadAllUsers mocks base method.
func (m *MockUseCase) ReadAllUsers() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllUsers")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllUsers indicates an expected call of ReadAllUsers.
func (mr *MockUseCaseMockRecorder) ReadAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllUsers", reflect.TypeOf((*MockUseCase)(nil).ReadAllUsers))
}
